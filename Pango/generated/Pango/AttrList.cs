// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Pango {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class AttrList : GLib.Opaque {

		[DllImport(NativeMethods.Pango, CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_attr_list_change(IntPtr raw, IntPtr attr);

		public void Change(Pango.Attribute attr) {
			pango_attr_list_change(Handle, attr.Handle);
		}

		[DllImport(NativeMethods.Pango, CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_attr_list_copy(IntPtr raw);

		public Pango.AttrList Copy() {
			IntPtr raw_ret = pango_attr_list_copy(Handle);
			Pango.AttrList ret = raw_ret == IntPtr.Zero ? null : (Pango.AttrList) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.AttrList), true);
			return ret;
		}

		[DllImport(NativeMethods.Pango, CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_attr_list_filter(IntPtr raw, PangoSharp.AttrFilterFuncNative func, IntPtr data);

		public Pango.AttrList Filter(Pango.AttrFilterFunc func) {
			PangoSharp.AttrFilterFuncWrapper func_wrapper = new PangoSharp.AttrFilterFuncWrapper (func);
			IntPtr raw_ret = pango_attr_list_filter(Handle, func_wrapper.NativeDelegate, IntPtr.Zero);
			Pango.AttrList ret = raw_ret == IntPtr.Zero ? null : (Pango.AttrList) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.AttrList), false);
			return ret;
		}

		[DllImport(NativeMethods.Pango, CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_attr_list_get_iterator(IntPtr raw);

		public Pango.AttrIterator Iterator { 
			get {
				IntPtr raw_ret = pango_attr_list_get_iterator(Handle);
				Pango.AttrIterator ret = raw_ret == IntPtr.Zero ? null : (Pango.AttrIterator) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.AttrIterator), true);
				return ret;
			}
		}

		[DllImport(NativeMethods.Pango, CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_attr_list_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = pango_attr_list_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport(NativeMethods.Pango, CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_attr_list_splice(IntPtr raw, IntPtr other, int pos, int len);

		public void Splice(Pango.AttrList other, int pos, int len) {
			pango_attr_list_splice(Handle, other == null ? IntPtr.Zero : other.Handle, pos, len);
		}

		public AttrList(IntPtr raw) : base(raw) {}

		[DllImport(NativeMethods.Pango, CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_attr_list_new();

		public AttrList () 
		{
			Raw = pango_attr_list_new();
		}

		[DllImport(NativeMethods.Pango, CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_attr_list_ref(IntPtr raw);

		protected override void Ref (IntPtr raw)
		{
			if (!Owned) {
				pango_attr_list_ref (raw);
				Owned = true;
			}
		}

		[Obsolete("Pango.AttrList is now refcounted automatically")]
		public AttrList Ref () { return this; }

		[DllImport(NativeMethods.Pango, CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_attr_list_unref(IntPtr raw);

		protected override void Unref (IntPtr raw)
		{
			if (Owned) {
				pango_attr_list_unref (raw);
				Owned = false;
			}
		}

		[Obsolete("Pango.AttrList is now refcounted automatically")]
		public void Unref () {}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				pango_attr_list_unref (handle);
				return false;
			}
		}

		~AttrList ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}

#endregion
	}
}
