// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Pango {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Item : GLib.Opaque {

		[DllImport(NativeMethods.PangoSharpGlue)]
		extern static uint pangosharp_pango_item_get_offset_offset ();

		static uint offset_offset = pangosharp_pango_item_get_offset_offset ();
		public int Offset {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + offset_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + offset_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport(NativeMethods.PangoSharpGlue)]
		extern static uint pangosharp_pango_item_get_length_offset ();

		static uint length_offset = pangosharp_pango_item_get_length_offset ();
		public int Length {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + length_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + length_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport(NativeMethods.PangoSharpGlue)]
		extern static uint pangosharp_pango_item_get_num_chars_offset ();

		static uint num_chars_offset = pangosharp_pango_item_get_num_chars_offset ();
		public int NumChars {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + num_chars_offset);
					return (*raw_ptr);
				}
			}
			set {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + num_chars_offset);
					*raw_ptr = value;
				}
			}
		}

		[DllImport(NativeMethods.PangoSharpGlue)]
		extern static uint pangosharp_pango_item_get_analysis_offset ();

		static uint analysis_offset = pangosharp_pango_item_get_analysis_offset ();
		public Pango.Analysis Analysis {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + analysis_offset);
					return Pango.Analysis.New ((*raw_ptr));
				}
			}
			set {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + analysis_offset);
					*raw_ptr = GLib.Marshaller.StructureToPtrAlloc (value);
				}
			}
		}

		[DllImport(NativeMethods.Pango, CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_item_copy(IntPtr raw);

		public Pango.Item Copy() {
			IntPtr raw_ret = pango_item_copy(Handle);
			Pango.Item ret = raw_ret == IntPtr.Zero ? null : (Pango.Item) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.Item), true);
			return ret;
		}

		[DllImport(NativeMethods.Pango, CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_item_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = pango_item_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport(NativeMethods.Pango, CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_item_split(IntPtr raw, int split_index, int split_offset);

		public Pango.Item Split(int split_index, int split_offset) {
			IntPtr raw_ret = pango_item_split(Handle, split_index, split_offset);
			Pango.Item ret = raw_ret == IntPtr.Zero ? null : (Pango.Item) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.Item), false);
			return ret;
		}

		public Item(IntPtr raw) : base(raw) {}

		[DllImport(NativeMethods.Pango, CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_item_new();

		public Item () 
		{
			Raw = pango_item_new();
		}

		[DllImport(NativeMethods.Pango, CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_item_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			pango_item_free (raw);
		}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				pango_item_free (handle);
				return false;
			}
		}

		~Item ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}

#endregion
	}
}
