// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Pango {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class LayoutLine : GLib.Opaque {

		[DllImport(NativeMethods.PangoSharpGlue)]
		extern static uint pangosharp_pango_layoutline_get_layout_offset ();

		static uint layout_offset = pangosharp_pango_layoutline_get_layout_offset ();
		public Pango.Layout Layout {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + layout_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Pango.Layout;
				}
			}
		}

		[DllImport(NativeMethods.PangoSharpGlue)]
		extern static uint pangosharp_pango_layoutline_get_start_index_offset ();

		static uint start_index_offset = pangosharp_pango_layoutline_get_start_index_offset ();
		public int StartIndex {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + start_index_offset);
					return (*raw_ptr);
				}
			}
		}

		[DllImport(NativeMethods.PangoSharpGlue)]
		extern static uint pangosharp_pango_layoutline_get_length_offset ();

		static uint length_offset = pangosharp_pango_layoutline_get_length_offset ();
		public int Length {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + length_offset);
					return (*raw_ptr);
				}
			}
		}

		[DllImport(NativeMethods.PangoSharpGlue)]
		extern static bool pangosharp_pango_layoutline_get_is_paragraph_start (IntPtr raw);
		public bool IsParagraphStart {
			get {
				bool result = pangosharp_pango_layoutline_get_is_paragraph_start (Handle);
				return result;
			}
		}

		[DllImport(NativeMethods.PangoSharpGlue)]
		extern static uint pangosharp_pango_layoutline_get_resolved_dir (IntPtr raw);
		public uint ResolvedDir {
			get {
				uint result = pangosharp_pango_layoutline_get_resolved_dir (Handle);
				return result;
			}
		}

		[DllImport(NativeMethods.Pango, CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_line_get_extents(IntPtr raw, IntPtr ink_rect, IntPtr logical_rect);

		public void GetExtents(ref Pango.Rectangle ink_rect, ref Pango.Rectangle logical_rect) {
			IntPtr native_ink_rect = GLib.Marshaller.StructureToPtrAlloc (ink_rect);
			IntPtr native_logical_rect = GLib.Marshaller.StructureToPtrAlloc (logical_rect);
			pango_layout_line_get_extents(Handle, native_ink_rect, native_logical_rect);
			ink_rect = Pango.Rectangle.New (native_ink_rect);
			Marshal.FreeHGlobal (native_ink_rect);
			logical_rect = Pango.Rectangle.New (native_logical_rect);
			Marshal.FreeHGlobal (native_logical_rect);
		}

		[DllImport(NativeMethods.Pango, CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_line_get_pixel_extents(IntPtr raw, IntPtr ink_rect, IntPtr logical_rect);

		public void GetPixelExtents(ref Pango.Rectangle ink_rect, ref Pango.Rectangle logical_rect) {
			IntPtr native_ink_rect = GLib.Marshaller.StructureToPtrAlloc (ink_rect);
			IntPtr native_logical_rect = GLib.Marshaller.StructureToPtrAlloc (logical_rect);
			pango_layout_line_get_pixel_extents(Handle, native_ink_rect, native_logical_rect);
			ink_rect = Pango.Rectangle.New (native_ink_rect);
			Marshal.FreeHGlobal (native_ink_rect);
			logical_rect = Pango.Rectangle.New (native_logical_rect);
			Marshal.FreeHGlobal (native_logical_rect);
		}

		[DllImport(NativeMethods.Pango, CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_line_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = pango_layout_line_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport(NativeMethods.Pango, CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_line_index_to_x(IntPtr raw, int index_, bool trailing, out int x_pos);

		public int IndexToX(int index_, bool trailing) {
			int x_pos;
			pango_layout_line_index_to_x(Handle, index_, trailing, out x_pos);
			return x_pos;
		}

		[DllImport(NativeMethods.Pango, CallingConvention = CallingConvention.Cdecl)]
		static extern bool pango_layout_line_x_to_index(IntPtr raw, int x_pos, out int index_, out int trailing);

		public bool XToIndex(int x_pos, out int index_, out int trailing) {
			bool raw_ret = pango_layout_line_x_to_index(Handle, x_pos, out index_, out trailing);
			bool ret = raw_ret;
			return ret;
		}

		public LayoutLine(IntPtr raw) : base(raw) {}

		[DllImport(NativeMethods.Pango, CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr pango_layout_line_ref(IntPtr raw);

		protected override void Ref (IntPtr raw)
		{
			if (!Owned) {
				pango_layout_line_ref (raw);
				Owned = true;
			}
		}

		[Obsolete("Pango.LayoutLine is now refcounted automatically")]
		public LayoutLine Ref () { return this; }

		[DllImport(NativeMethods.Pango, CallingConvention = CallingConvention.Cdecl)]
		static extern void pango_layout_line_unref(IntPtr raw);

		protected override void Unref (IntPtr raw)
		{
			if (Owned) {
				pango_layout_line_unref (raw);
				Owned = false;
			}
		}

		[Obsolete("Pango.LayoutLine is now refcounted automatically")]
		public void Unref () {}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				pango_layout_line_unref (handle);
				return false;
			}
		}

		~LayoutLine ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}

#endregion
	}
}
